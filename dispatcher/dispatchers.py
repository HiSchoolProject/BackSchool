# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 The HiSchool! Project
#
# This file is part of HiSchool!.
#
# HiSchool! is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# HiSchool! is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with HiSchool!.  If not, see <http://www.gnu.org/licenses/>.
"""Declare the platform dispatchers used to transfer requests to their correct modules using the URL."""
from importlib import import_module

from django.conf.urls import include
from django.conf.urls import url

from .exceptions import DispatcherException

class Dispatcher():
    """
    Provide a generic definition of a dispatcher.

    A Dispatcher should be used to generate a list of django.urls.url() that corresponds to the state of the server.
    """

    url = None
    """The URL that includes sub-urls generated by the dispatcher."""

class ApplicationAPIDispatcher(Dispatcher):
    """
    Define a list of API routes that can be used for a given application.

    This dispatcher will load and look for a variable named 'apiurls' in the module <application_name>.urls.
    This variable is then used to generate API routes.

    The 'apiurls' variable should be an array of tuples where each tuple contains an iterable of routes for a
    specific API version as the first value and the API version as the second value.

    Example:
    >>> apiurls = [(<urls_for_v1>, 1), (<urls_for_v2>, 2)]
    """

    def __init__(self, application):
        """
        Instanciate a new ApplicationAPIDispatcher that inherits from 'Dispatcher'.

        This dispatcher will attempt to load the urls module of the given application and then use the
        apipatterns dict to get a list of routes.

        When if no namespace is provided, the application name will be used.
        """
        if application is None:
            raise ValueError('An application name should be given for this dispatcher to work')

        super().__init__()
        self.__application = application
        self.__urls = []

        self.scan_module()

    def scan_module(self):
        """
        Try to load the urls module contained in the application package.

        If such module is found and contains an apipatterns dictionnary correctly formatted, load the routes.
        """

        try:
            module = import_module('.urls', self.__application)
            self.import_urls(module.apiurls)
        except ImportError as e:
            raise DispatcherException('Failed to import [{}.urls]: [{}]'.format(self.__application, e))
        except AttributeError as e:
            raise DispatcherException('No variable apiurls found in [{}.urls]: [{}]'.format(self.__application, e))

    def import_urls(self, api_urls):
        """Using the given api_urls, construct an array of urls for the object."""
        self.__urls = []

        for (urls, version) in api_urls:
            self.__urls.append(url('^v{}/'.format(version), include(urls)))

        self.url = url('^{}/'.format(self.__application), include(self.__urls))
